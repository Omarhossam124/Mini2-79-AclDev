version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: miniapp-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: miniapp
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:6
    container_name: miniapp-mongo
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build: .
    container_name: miniproject2-app
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: miniproject2
      
      # PostgreSQL configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/miniapp
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: true
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      
      # MongoDB configuration
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/rating_db
      
      # Class paths for reflection-based testing
      "ModelsPath.Captain": com.example.demo.models.Captain
      "ModelsPath.Customer": com.example.demo.models.Customer
      "ModelsPath.Payment": com.example.demo.models.Payment
      "ModelsPath.Rating": com.example.demo.models.Rating
      "ModelsPath.Trip": com.example.demo.models.Trip
    volumes:
      - .:/app
    restart: unless-stopped

volumes:
  pgdata:
  mongodata: